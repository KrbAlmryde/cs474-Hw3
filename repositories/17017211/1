From 827c0b66a45dd5942920b4bcfd7d32d2515e363e Mon Sep 17 00:00:00 2001
From: LiMingkuan <limkuan24@gmail.com>
Date: Thu, 20 Feb 2014 23:15:39 +0800
Subject: [PATCH] 2014-02-19 update


19	0	.gitignore
4	0	.settings/org.eclipse.jdt.core.prefs
27	0	AndroidManifest.xml
1	0	README.md
4	0	assets/gfx/.directory
-	-	assets/gfx/background.png
-	-	assets/gfx/bird.png
-	-	assets/gfx/cloud.png
-	-	assets/gfx/ground.png
-	-	assets/gfx/ground_ani.png
-	-	assets/gfx/low_bar.png
-	-	assets/gfx/ready.png
-	-	assets/gfx/score_num.png
-	-	assets/gfx/up_bar.png
-	-	ic_launcher-web.png
-	-	libs/andengine.jar
-	-	libs/andenginephysicsbox2dextension.jar
-	-	libs/android-support-v4.jar
-	-	libs/armeabi-v7a/libandenginephysicsbox2dextension.so
-	-	libs/armeabi/libandenginephysicsbox2dextension.so
-	-	libs/mips/libandenginephysicsbox2dextension.so
-	-	libs/x86/libandenginephysicsbox2dextension.so
20	0	proguard-project.txt
14	0	project.properties
-	-	res/drawable-hdpi/ic_launcher.png
-	-	res/drawable-mdpi/ic_launcher.png
-	-	res/drawable-xhdpi/ic_launcher.png
-	-	res/drawable-xxhdpi/ic_launcher.png
16	0	res/layout/activity_main.xml
9	0	res/menu/main.xml
8	0	res/values-sw600dp/dimens.xml
9	0	res/values-sw720dp-land/dimens.xml
11	0	res/values-v11/styles.xml
12	0	res/values-v14/styles.xml
7	0	res/values/dimens.xml
8	0	res/values/strings.xml
20	0	res/values/styles.xml
24	0	src/limk/flappybird/Bar.java
177	0	src/limk/flappybird/BarManager.java
91	0	src/limk/flappybird/Bird.java
246	0	src/limk/flappybird/MainActivity.java
81	0	src/limk/flappybird/Score.java
 create mode 100644 .gitignore
 create mode 100644 .settings/org.eclipse.jdt.core.prefs
 create mode 100644 AndroidManifest.xml
 create mode 100644 README.md
 create mode 100644 assets/gfx/.directory
 create mode 100644 assets/gfx/background.png
 create mode 100644 assets/gfx/bird.png
 create mode 100644 assets/gfx/cloud.png
 create mode 100644 assets/gfx/ground.png
 create mode 100644 assets/gfx/ground_ani.png
 create mode 100644 assets/gfx/low_bar.png
 create mode 100644 assets/gfx/ready.png
 create mode 100644 assets/gfx/score_num.png
 create mode 100644 assets/gfx/up_bar.png
 create mode 100644 ic_launcher-web.png
 create mode 100644 libs/andengine.jar
 create mode 100644 libs/andenginephysicsbox2dextension.jar
 create mode 100644 libs/android-support-v4.jar
 create mode 100644 libs/armeabi-v7a/libandenginephysicsbox2dextension.so
 create mode 100644 libs/armeabi/libandenginephysicsbox2dextension.so
 create mode 100644 libs/mips/libandenginephysicsbox2dextension.so
 create mode 100644 libs/x86/libandenginephysicsbox2dextension.so
 create mode 100644 proguard-project.txt
 create mode 100644 project.properties
 create mode 100644 res/drawable-hdpi/ic_launcher.png
 create mode 100644 res/drawable-mdpi/ic_launcher.png
 create mode 100644 res/drawable-xhdpi/ic_launcher.png
 create mode 100644 res/drawable-xxhdpi/ic_launcher.png
 create mode 100644 res/layout/activity_main.xml
 create mode 100644 res/menu/main.xml
 create mode 100644 res/values-sw600dp/dimens.xml
 create mode 100644 res/values-sw720dp-land/dimens.xml
 create mode 100644 res/values-v11/styles.xml
 create mode 100644 res/values-v14/styles.xml
 create mode 100644 res/values/dimens.xml
 create mode 100644 res/values/strings.xml
 create mode 100644 res/values/styles.xml
 create mode 100644 src/limk/flappybird/Bar.java
 create mode 100644 src/limk/flappybird/BarManager.java
 create mode 100644 src/limk/flappybird/Bird.java
 create mode 100644 src/limk/flappybird/MainActivity.java
 create mode 100644 src/limk/flappybird/Score.java

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..b9b0870
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,19 @@
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# generated files
+bin/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Eclipse project files
+.classpath
+.project
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..b080d2d
--- /dev/null
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,4 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.source=1.6
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
new file mode 100644
index 0000000..b05ce14
--- /dev/null
+++ b/AndroidManifest.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="limk.flappybird"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="8"
+        android:targetSdkVersion="18" />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme" >
+        <activity
+            android:name="limk.flappybird.MainActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..24512ae
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+一个简单的山寨游戏，使用AndEngine 游戏引擎
diff --git a/assets/gfx/.directory b/assets/gfx/.directory
new file mode 100644
index 0000000..e51a093
--- /dev/null
+++ b/assets/gfx/.directory
@@ -0,0 +1,4 @@
+[Dolphin]
+PreviewsShown=true
+Timestamp=2014,2,19,22,59,33
+Version=3
diff --git a/assets/gfx/background.png b/assets/gfx/background.png
new file mode 100644
index 0000000..3d69b56
Binary files /dev/null and b/assets/gfx/background.png differ
diff --git a/assets/gfx/bird.png b/assets/gfx/bird.png
new file mode 100644
index 0000000..452eaf9
Binary files /dev/null and b/assets/gfx/bird.png differ
diff --git a/assets/gfx/cloud.png b/assets/gfx/cloud.png
new file mode 100644
index 0000000..950d74e
Binary files /dev/null and b/assets/gfx/cloud.png differ
diff --git a/assets/gfx/ground.png b/assets/gfx/ground.png
new file mode 100644
index 0000000..9f0c305
Binary files /dev/null and b/assets/gfx/ground.png differ
diff --git a/assets/gfx/ground_ani.png b/assets/gfx/ground_ani.png
new file mode 100644
index 0000000..81ece3f
Binary files /dev/null and b/assets/gfx/ground_ani.png differ
diff --git a/assets/gfx/low_bar.png b/assets/gfx/low_bar.png
new file mode 100644
index 0000000..04dd2ac
Binary files /dev/null and b/assets/gfx/low_bar.png differ
diff --git a/assets/gfx/ready.png b/assets/gfx/ready.png
new file mode 100644
index 0000000..65522ba
Binary files /dev/null and b/assets/gfx/ready.png differ
diff --git a/assets/gfx/score_num.png b/assets/gfx/score_num.png
new file mode 100644
index 0000000..0e60de0
Binary files /dev/null and b/assets/gfx/score_num.png differ
diff --git a/assets/gfx/up_bar.png b/assets/gfx/up_bar.png
new file mode 100644
index 0000000..71975ee
Binary files /dev/null and b/assets/gfx/up_bar.png differ
diff --git a/ic_launcher-web.png b/ic_launcher-web.png
new file mode 100644
index 0000000..a18cbb4
Binary files /dev/null and b/ic_launcher-web.png differ
diff --git a/libs/andengine.jar b/libs/andengine.jar
new file mode 100644
index 0000000..da53461
Binary files /dev/null and b/libs/andengine.jar differ
diff --git a/libs/andenginephysicsbox2dextension.jar b/libs/andenginephysicsbox2dextension.jar
new file mode 100644
index 0000000..f2c800a
Binary files /dev/null and b/libs/andenginephysicsbox2dextension.jar differ
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
new file mode 100644
index 0000000..cf12d28
Binary files /dev/null and b/libs/android-support-v4.jar differ
diff --git a/libs/armeabi-v7a/libandenginephysicsbox2dextension.so b/libs/armeabi-v7a/libandenginephysicsbox2dextension.so
new file mode 100644
index 0000000..9201e74
Binary files /dev/null and b/libs/armeabi-v7a/libandenginephysicsbox2dextension.so differ
diff --git a/libs/armeabi/libandenginephysicsbox2dextension.so b/libs/armeabi/libandenginephysicsbox2dextension.so
new file mode 100644
index 0000000..39f17ff
Binary files /dev/null and b/libs/armeabi/libandenginephysicsbox2dextension.so differ
diff --git a/libs/mips/libandenginephysicsbox2dextension.so b/libs/mips/libandenginephysicsbox2dextension.so
new file mode 100644
index 0000000..93c623f
Binary files /dev/null and b/libs/mips/libandenginephysicsbox2dextension.so differ
diff --git a/libs/x86/libandenginephysicsbox2dextension.so b/libs/x86/libandenginephysicsbox2dextension.so
new file mode 100644
index 0000000..a9e7863
Binary files /dev/null and b/libs/x86/libandenginephysicsbox2dextension.so differ
diff --git a/proguard-project.txt b/proguard-project.txt
new file mode 100644
index 0000000..f2fe155
--- /dev/null
+++ b/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/project.properties b/project.properties
new file mode 100644
index 0000000..4ab1256
--- /dev/null
+++ b/project.properties
@@ -0,0 +1,14 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-19
diff --git a/res/drawable-hdpi/ic_launcher.png b/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000..a16d83a
Binary files /dev/null and b/res/drawable-hdpi/ic_launcher.png differ
diff --git a/res/drawable-mdpi/ic_launcher.png b/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000..cb0463b
Binary files /dev/null and b/res/drawable-mdpi/ic_launcher.png differ
diff --git a/res/drawable-xhdpi/ic_launcher.png b/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..e0df481
Binary files /dev/null and b/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/res/drawable-xxhdpi/ic_launcher.png b/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..85a6081
Binary files /dev/null and b/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/res/layout/activity_main.xml b/res/layout/activity_main.xml
new file mode 100644
index 0000000..168c9b8
--- /dev/null
+++ b/res/layout/activity_main.xml
@@ -0,0 +1,16 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context=".MainActivity" >
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/hello_world" />
+
+</RelativeLayout>
diff --git a/res/menu/main.xml b/res/menu/main.xml
new file mode 100644
index 0000000..c002028
--- /dev/null
+++ b/res/menu/main.xml
@@ -0,0 +1,9 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <item
+        android:id="@+id/action_settings"
+        android:orderInCategory="100"
+        android:showAsAction="never"
+        android:title="@string/action_settings"/>
+
+</menu>
diff --git a/res/values-sw600dp/dimens.xml b/res/values-sw600dp/dimens.xml
new file mode 100644
index 0000000..44f01db
--- /dev/null
+++ b/res/values-sw600dp/dimens.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!--
+         Customize dimensions originally defined in res/values/dimens.xml (such as
+         screen margins) for sw600dp devices (e.g. 7" tablets) here.
+    -->
+
+</resources>
diff --git a/res/values-sw720dp-land/dimens.xml b/res/values-sw720dp-land/dimens.xml
new file mode 100644
index 0000000..61e3fa8
--- /dev/null
+++ b/res/values-sw720dp-land/dimens.xml
@@ -0,0 +1,9 @@
+<resources>
+
+    <!--
+         Customize dimensions originally defined in res/values/dimens.xml (such as
+         screen margins) for sw720dp devices (e.g. 10" tablets) in landscape here.
+    -->
+    <dimen name="activity_horizontal_margin">128dp</dimen>
+
+</resources>
diff --git a/res/values-v11/styles.xml b/res/values-v11/styles.xml
new file mode 100644
index 0000000..3c02242
--- /dev/null
+++ b/res/values-v11/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!--
+        Base application theme for API 11+. This theme completely replaces
+        AppBaseTheme from res/values/styles.xml on API 11+ devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light">
+        <!-- API 11 theme customizations can go here. -->
+    </style>
+
+</resources>
diff --git a/res/values-v14/styles.xml b/res/values-v14/styles.xml
new file mode 100644
index 0000000..a91fd03
--- /dev/null
+++ b/res/values-v14/styles.xml
@@ -0,0 +1,12 @@
+<resources>
+
+    <!--
+        Base application theme for API 14+. This theme completely replaces
+        AppBaseTheme from BOTH res/values/styles.xml and
+        res/values-v11/styles.xml on API 14+ devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light.DarkActionBar">
+        <!-- API 14 theme customizations can go here. -->
+    </style>
+
+</resources>
diff --git a/res/values/dimens.xml b/res/values/dimens.xml
new file mode 100644
index 0000000..55c1e59
--- /dev/null
+++ b/res/values/dimens.xml
@@ -0,0 +1,7 @@
+<resources>
+
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+
+</resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
new file mode 100644
index 0000000..e758b7e
--- /dev/null
+++ b/res/values/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">FlappyBird</string>
+    <string name="action_settings">Settings</string>
+    <string name="hello_world">Hello world!</string>
+
+</resources>
diff --git a/res/values/styles.xml b/res/values/styles.xml
new file mode 100644
index 0000000..6ce89c7
--- /dev/null
+++ b/res/values/styles.xml
@@ -0,0 +1,20 @@
+<resources>
+
+    <!--
+        Base application theme, dependent on API level. This theme is replaced
+        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Light">
+        <!--
+            Theme customizations available in newer API levels can go in
+            res/values-vXX/styles.xml, while customizations related to
+            backward-compatibility can go here.
+        -->
+    </style>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="AppBaseTheme">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
diff --git a/src/limk/flappybird/Bar.java b/src/limk/flappybird/Bar.java
new file mode 100644
index 0000000..2db5716
--- /dev/null
+++ b/src/limk/flappybird/Bar.java
@@ -0,0 +1,24 @@
+package limk.flappybird;
+
+import org.andengine.entity.sprite.Sprite;
+import org.andengine.opengl.texture.region.ITextureRegion;
+import org.andengine.opengl.vbo.VertexBufferObjectManager;
+
+public class Bar extends Sprite {
+
+	public static final int UPPER_BAR = 0;
+	public static final int LOWER_BAR = 1;
+	public boolean isGoal;
+	private int type;
+	
+	public Bar(float pX, float pY, ITextureRegion pTextureRegion,
+			VertexBufferObjectManager vertexBufferObjectManager, int type) {
+		super(pX, pY, pTextureRegion, vertexBufferObjectManager);
+		this.type = type;
+		this.isGoal = false;
+	}
+	
+	public int getType(){
+		return type;
+	}
+}
diff --git a/src/limk/flappybird/BarManager.java b/src/limk/flappybird/BarManager.java
new file mode 100644
index 0000000..6306150
--- /dev/null
+++ b/src/limk/flappybird/BarManager.java
@@ -0,0 +1,177 @@
+package limk.flappybird;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.Random;
+
+import limk.flappybird.MainActivity.Constant;
+
+import org.andengine.entity.modifier.MoveXModifier;
+import org.andengine.entity.scene.Scene;
+import org.andengine.entity.sprite.Sprite;
+import org.andengine.opengl.texture.region.TextureRegion;
+import org.andengine.opengl.vbo.VertexBufferObjectManager;
+
+import android.os.Handler;
+import android.os.Message;
+
+public class BarManager {
+	private boolean flag;
+	private ArrayList<Bar> freeBars;
+	private ArrayList<Bar> busyBars;
+	private Scene mScene;
+	private int CAMERA_WIDTH;
+	private int CAMERA_HEIGHT;
+	private TextureRegion mUpperBarTextureRegion;
+	private TextureRegion mLowerBarTextureRegion;
+	private Sprite floor;
+	private Handler mHandler;
+	private VertexBufferObjectManager mVertexBufferObjectManager;
+
+	public BarManager(Scene pScene, int width, int height, TextureRegion pUpperBarTextureRegion,
+			TextureRegion pLowerBarTextureRegion, Sprite floor, VertexBufferObjectManager pVertexBufferObjectManager,
+			Handler pHandler) {
+		freeBars = new ArrayList<Bar>();
+		busyBars = new ArrayList<Bar>();
+
+		this.mScene = pScene;
+		this.CAMERA_WIDTH = width;
+		this.CAMERA_HEIGHT = height;
+		this.mUpperBarTextureRegion = pUpperBarTextureRegion;
+		this.mLowerBarTextureRegion = pLowerBarTextureRegion;
+		this.floor = floor;
+		this.flag = false;
+		this.mHandler = pHandler;
+
+		for (int i = 0; i < 4; i++) {
+			Random random = new Random();
+			float maxRand = CAMERA_HEIGHT - 2 * Constant.PADDING - Constant.INTERVAL - floor.getHeight();
+			float randPos = random.nextFloat() * maxRand + Constant.PADDING;
+			Bar upperBar = new Bar(CAMERA_WIDTH + mUpperBarTextureRegion.getWidth(), CAMERA_HEIGHT - randPos
+					+ mUpperBarTextureRegion.getHeight() / 2, mUpperBarTextureRegion, mVertexBufferObjectManager,
+					Bar.UPPER_BAR);
+			Bar lowerBar = new Bar(CAMERA_WIDTH + mLowerBarTextureRegion.getWidth(), CAMERA_HEIGHT - randPos
+					- Constant.INTERVAL - mLowerBarTextureRegion.getHeight() / 2, mLowerBarTextureRegion,
+					mVertexBufferObjectManager, Bar.LOWER_BAR);
+			upperBar.setZIndex(0);
+			lowerBar.setZIndex(0);
+			mScene.attachChild(upperBar);
+			mScene.attachChild(lowerBar);
+			mScene.sortChildren();
+			freeBars.add(upperBar);
+			freeBars.add(lowerBar);
+		}
+	}
+
+	public void update(Bird bird) {
+		float barRandTemp = -1;
+		while (flag) {
+		}
+		flag = true;
+		Iterator<Bar> iterator = busyBars.iterator();
+		while (iterator.hasNext()) {
+			Bar bar = iterator.next();
+			// System.out.println("Bar: " + bar.getY());
+			if (bar.collidesWith(bird)) {
+				bird.dead(floor);
+			} else if (bar.getType() == Bar.UPPER_BAR && !bar.isGoal && (bar.getX() - bird.getX() < 3f)
+					&& bar.getX() > bird.getX()) {
+				Message msg = new Message();
+				msg.what = MainActivity.ADD_SCORE;
+				mHandler.sendMessage(msg);
+
+				bar.isGoal = true;
+				System.out.println("isGoal");
+			}
+
+			if (bar.getX() <= -bar.getWidth()) {
+
+				if (barRandTemp == -1) {
+					Random random = new Random();
+					float maxRand = CAMERA_HEIGHT - 2 * Constant.PADDING - Constant.INTERVAL - floor.getHeight();
+					float randPos = random.nextFloat() * maxRand + Constant.PADDING;
+					bar.setPosition(CAMERA_WIDTH + mUpperBarTextureRegion.getWidth(), CAMERA_HEIGHT - randPos
+							+ mUpperBarTextureRegion.getHeight() / 2);
+					barRandTemp = randPos;
+				} else {
+					bar.setPosition(CAMERA_WIDTH + mLowerBarTextureRegion.getWidth(), CAMERA_HEIGHT - barRandTemp
+							- Constant.INTERVAL - mLowerBarTextureRegion.getHeight() / 2);
+					barRandTemp = -1;
+				}
+				bar.isGoal = false;
+				freeBars.add(bar);
+				iterator.remove();
+			}
+		}
+		flag = false;
+	}
+
+	public void addBar() {
+
+		while (flag) {
+		}
+		flag = true;
+		if (freeBars.isEmpty()) {
+			Random random = new Random();
+			float maxRand = CAMERA_HEIGHT - 2 * Constant.PADDING - Constant.INTERVAL - floor.getHeight();
+			float randPos = random.nextFloat() * maxRand + Constant.PADDING;
+			Bar upperBar = new Bar(CAMERA_WIDTH + mUpperBarTextureRegion.getWidth(), CAMERA_HEIGHT - randPos
+					+ mUpperBarTextureRegion.getHeight() / 2, mUpperBarTextureRegion, mVertexBufferObjectManager,
+					Bar.UPPER_BAR);
+			Bar lowerBar = new Bar(CAMERA_WIDTH + mLowerBarTextureRegion.getWidth(), CAMERA_HEIGHT - randPos
+					- Constant.INTERVAL - mLowerBarTextureRegion.getHeight() / 2, mLowerBarTextureRegion,
+					mVertexBufferObjectManager, Bar.LOWER_BAR);
+			upperBar.setZIndex(0);
+			lowerBar.setZIndex(0);
+			mScene.attachChild(upperBar);
+			mScene.attachChild(lowerBar);
+			mScene.sortChildren();
+			freeBars.add(upperBar);
+			freeBars.add(lowerBar);
+		}
+		Bar upperBar = freeBars.get(0);
+		Bar lowerBar = freeBars.get(1);
+		upperBar.registerEntityModifier(new MoveXModifier(3.0f, upperBar.getX(), -mUpperBarTextureRegion.getWidth()));
+		lowerBar.registerEntityModifier(new MoveXModifier(3.0f, upperBar.getX(), -mLowerBarTextureRegion.getWidth()));
+		freeBars.remove(0);
+		freeBars.remove(0);
+		busyBars.add(upperBar);
+		busyBars.add(lowerBar);
+		flag = false;
+	}
+
+	public void gameOver() {
+		flag = true;
+		Iterator<Bar> iterator = busyBars.iterator();
+		while (iterator.hasNext()) {
+			Bar bar = iterator.next();
+			bar.clearEntityModifiers();
+		}
+		flag = false;
+	}
+
+	public void restart() {
+		flag = true;
+		float barRandTemp = -1;
+		Iterator<Bar> iterator = busyBars.iterator();
+		while (iterator.hasNext()) {
+			Bar bar = iterator.next();
+			if (barRandTemp == -1) {
+				Random random = new Random();
+				float maxRand = CAMERA_HEIGHT - 2 * Constant.PADDING - Constant.INTERVAL - floor.getHeight();
+				float randPos = random.nextFloat() * maxRand + Constant.PADDING;
+				bar.setPosition(CAMERA_WIDTH + mUpperBarTextureRegion.getWidth(), CAMERA_HEIGHT - randPos
+						+ mUpperBarTextureRegion.getHeight() / 2);
+				barRandTemp = randPos;
+			} else {
+				bar.setPosition(CAMERA_WIDTH + mLowerBarTextureRegion.getWidth(), CAMERA_HEIGHT - barRandTemp
+						- Constant.INTERVAL - mLowerBarTextureRegion.getHeight() / 2);
+				barRandTemp = -1;
+			}
+			bar.isGoal = false;
+			freeBars.add(bar);
+			iterator.remove();
+		}
+		flag = false;
+	}
+}
diff --git a/src/limk/flappybird/Bird.java b/src/limk/flappybird/Bird.java
new file mode 100644
index 0000000..ff7cfe0
--- /dev/null
+++ b/src/limk/flappybird/Bird.java
@@ -0,0 +1,91 @@
+package limk.flappybird;
+
+import limk.flappybird.MainActivity.Constant;
+
+import org.andengine.entity.scene.Scene;
+import org.andengine.entity.sprite.AnimatedSprite;
+import org.andengine.entity.sprite.Sprite;
+import org.andengine.extension.physics.box2d.PhysicsConnector;
+import org.andengine.extension.physics.box2d.PhysicsFactory;
+import org.andengine.extension.physics.box2d.PhysicsWorld;
+import org.andengine.opengl.texture.region.ITiledTextureRegion;
+import org.andengine.opengl.vbo.VertexBufferObjectManager;
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Message;
+
+import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.physics.box2d.Body;
+import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
+import com.badlogic.gdx.physics.box2d.FixtureDef;
+
+public class Bird extends AnimatedSprite {
+
+	protected Context mContext;
+	protected PhysicsWorld mPhysicsWorld;
+	protected Body birdBody;
+	protected Scene mScene;
+	protected Handler mHandler;
+	protected PhysicsConnector birdConnector;
+	protected boolean isDead;
+	protected float x, y;
+
+	public Bird(float pX, float pY, ITiledTextureRegion pTiledTextureRegion,
+			VertexBufferObjectManager pVertexBufferObjectManager, Context pContext, PhysicsWorld pPhysicsWorld,
+			Scene pScene, Handler pHandler) {
+		super(pX, pY, pTiledTextureRegion, pVertexBufferObjectManager);
+		this.mContext = pContext;
+		this.mPhysicsWorld = pPhysicsWorld;
+		this.mScene = pScene;
+		this.mHandler = pHandler;
+		this.setZIndex(20);
+		this.animate(150);
+		this.isDead = false;
+		this.x = pX;
+		this.y = pY;
+	}
+
+	public void flyUp() {
+		if (!isDead) {
+			birdBody.setLinearVelocity(new Vector2(0, Constant.SPEED));
+		}
+	}
+
+	public void dead(Sprite floor) {
+		isDead = true;
+		Message msg = new Message();
+		msg.what = MainActivity.GAME_OVER;
+		mHandler.sendMessage(msg);
+
+		this.stopAnimation();
+		if (floor.collidesWith(this)) {
+			mPhysicsWorld.unregisterPhysicsConnector(birdConnector);
+		}
+	}
+
+	public Vector2 getSpeed() {
+		return birdBody.getLinearVelocity();
+	}
+
+	public void setAngleSpeed(float speed) {
+		birdBody.setAngularVelocity(speed);
+	}
+
+	public float getAngle() {
+		return birdBody.getAngle();
+	}
+
+	public void begin() {
+		FixtureDef birFixtureDef = PhysicsFactory.createFixtureDef(1.0f, 0, 0);
+		birdBody = PhysicsFactory.createCircleBody(mPhysicsWorld, this, BodyType.DynamicBody, birFixtureDef);
+		birdConnector = new PhysicsConnector(this, birdBody);
+		mPhysicsWorld.registerPhysicsConnector(birdConnector);
+	}
+
+	public void restart() {
+		isDead = false;
+		this.setPosition(x, y);
+		this.animate(150);
+	}
+}
diff --git a/src/limk/flappybird/MainActivity.java b/src/limk/flappybird/MainActivity.java
new file mode 100644
index 0000000..7e6a53f
--- /dev/null
+++ b/src/limk/flappybird/MainActivity.java
@@ -0,0 +1,246 @@
+package limk.flappybird;
+
+import java.io.IOException;
+
+import org.andengine.engine.camera.Camera;
+import org.andengine.engine.handler.IUpdateHandler;
+import org.andengine.engine.options.EngineOptions;
+import org.andengine.engine.options.ScreenOrientation;
+import org.andengine.engine.options.resolutionpolicy.FillResolutionPolicy;
+import org.andengine.entity.modifier.AlphaModifier;
+import org.andengine.entity.modifier.LoopEntityModifier;
+import org.andengine.entity.modifier.MoveXModifier;
+import org.andengine.entity.scene.IOnSceneTouchListener;
+import org.andengine.entity.scene.Scene;
+import org.andengine.entity.scene.background.AutoParallaxBackground;
+import org.andengine.entity.scene.background.ParallaxBackground.ParallaxEntity;
+import org.andengine.entity.sprite.Sprite;
+import org.andengine.entity.util.FPSLogger;
+import org.andengine.extension.physics.box2d.PhysicsWorld;
+import org.andengine.input.touch.TouchEvent;
+import org.andengine.opengl.texture.Texture;
+import org.andengine.opengl.texture.TextureOptions;
+import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas;
+import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory;
+import org.andengine.opengl.texture.bitmap.AssetBitmapTexture;
+import org.andengine.opengl.texture.region.TextureRegion;
+import org.andengine.opengl.texture.region.TextureRegionFactory;
+import org.andengine.opengl.texture.region.TiledTextureRegion;
+import org.andengine.ui.activity.SimpleBaseGameActivity;
+
+import android.hardware.SensorManager;
+import android.os.Handler;
+import android.os.Message;
+import android.util.DisplayMetrics;
+
+import com.badlogic.gdx.math.Vector2;
+
+public class MainActivity extends SimpleBaseGameActivity {
+
+	private static int CAMERA_WIDTH;
+	private static int CAMERA_HEIGHT;
+	public static int GAME_OVER = 0;
+	public static int ADD_SCORE = 1;
+
+	private DisplayMetrics metrics;
+	private Camera mCamera;
+	private boolean isBegin;
+	private boolean isDead;
+
+	private BitmapTextureAtlas mBirdBitmapTextureAtlas;
+	private TiledTextureRegion mBirdTextureRegion;
+	private BitmapTextureAtlas mNumberBitmapTextureAtlas;
+	private TiledTextureRegion mNumberTextureRegion;
+
+	private Texture mGroundTexture;
+	private TextureRegion mGroundTextureRegion;
+	private Texture mReadyTexture;
+	private TextureRegion mReadyTextureRegion;
+	private Texture mUpperBarTexture;
+	private TextureRegion mUpperBarTextureRegion;
+	private Texture mLowerBarTexture;
+	private TextureRegion mLowerBarTextureRegion;
+	private Texture mBackgroundTexture;
+	private TextureRegion mBackgroundTextureRegion;
+	private Bird bird;
+	private Sprite floor;
+	private Sprite ready;
+	private PhysicsWorld mPhysicsWorld;
+	private Scene mScene;
+	private Score mScore;
+	private BarManager barManager;
+
+	private Handler mHandler;
+	private IUpdateHandler updateHandler = new IUpdateHandler() {
+		@Override
+		public void reset() {
+		}
+
+		@Override
+		public void onUpdate(float pSecondsElapsed) {
+			barManager.update(bird);
+			if (floor.collidesWith(bird)) {
+				bird.dead(floor);
+			}
+		}
+	};
+
+	private Runnable addBar = new Runnable() {
+
+		@Override
+		public void run() {
+			barManager.addBar();
+			mHandler.postDelayed(addBar, 1250);
+		}
+	};
+
+	@Override
+	public EngineOptions onCreateEngineOptions() {
+		Constant.init();
+		mHandler = new Handler() {
+			@Override
+			public void handleMessage(Message msg) {
+				if (msg.what == GAME_OVER) {
+					barManager.gameOver();
+					mHandler.removeCallbacks(addBar);
+					floor.clearEntityModifiers();
+					isDead = true;
+					isBegin = false;
+				}
+				if (msg.what == ADD_SCORE) {
+					mScore.addScore();
+				}
+			}
+		};
+		metrics = new DisplayMetrics();
+		getWindowManager().getDefaultDisplay().getMetrics(metrics);
+		CAMERA_WIDTH = 320;
+		CAMERA_HEIGHT = 480;
+		mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
+		return new EngineOptions(true, ScreenOrientation.PORTRAIT_FIXED, new FillResolutionPolicy(), mCamera);
+	}
+
+	@Override
+	protected void onCreateResources() throws IOException {
+
+		this.mBirdBitmapTextureAtlas = new BitmapTextureAtlas(getTextureManager(), 1024, 1024, TextureOptions.DEFAULT);
+		mBirdTextureRegion = BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(mBirdBitmapTextureAtlas, this,
+				"gfx/bird.png", 0, 0, 3, 1);
+		this.mEngine.getTextureManager().loadTexture(mBirdBitmapTextureAtlas);
+
+		this.mNumberBitmapTextureAtlas = new BitmapTextureAtlas(getTextureManager(), 1024, 1024, TextureOptions.DEFAULT);
+		mNumberTextureRegion = BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(mNumberBitmapTextureAtlas,
+				this, "gfx/score_num.png", 0, 0, 11, 1);
+		this.mEngine.getTextureManager().loadTexture(mNumberBitmapTextureAtlas);
+
+		mGroundTexture = new AssetBitmapTexture(getTextureManager(), getAssets(), "gfx/ground.png");
+		mGroundTextureRegion = TextureRegionFactory.extractFromTexture(mGroundTexture);
+		mGroundTexture.load();
+
+		mReadyTexture = new AssetBitmapTexture(getTextureManager(), getAssets(), "gfx/ready.png");
+		mReadyTextureRegion = TextureRegionFactory.extractFromTexture(mReadyTexture);
+		mReadyTexture.load();
+
+		mBackgroundTexture = new AssetBitmapTexture(getTextureManager(), getAssets(), "gfx/background.png");
+		mBackgroundTextureRegion = TextureRegionFactory.extractFromTexture(mBackgroundTexture);
+		mBackgroundTexture.load();
+
+		mUpperBarTexture = new AssetBitmapTexture(getTextureManager(), getAssets(), "gfx/up_bar.png");
+		mUpperBarTextureRegion = TextureRegionFactory.extractFromTexture(mUpperBarTexture);
+		mUpperBarTexture.load();
+
+		mLowerBarTexture = new AssetBitmapTexture(getTextureManager(), getAssets(), "gfx/low_bar.png");
+		mLowerBarTextureRegion = TextureRegionFactory.extractFromTexture(mLowerBarTexture);
+		mLowerBarTexture.load();
+
+		isBegin = false;
+		isDead = false;
+	}
+
+	@Override
+	protected Scene onCreateScene() {
+		this.mEngine.registerUpdateHandler(new FPSLogger());
+		mScene = new Scene();
+		AutoParallaxBackground background = new AutoParallaxBackground(0, 0, 0, 5);
+		background.attachParallaxEntity(new ParallaxEntity(-5.0f, new Sprite(CAMERA_WIDTH / 2, CAMERA_HEIGHT / 2,
+				mBackgroundTextureRegion, getVertexBufferObjectManager())));
+		// background.attachParallaxEntity(new ParallaxEntity(-10.0f, floor));
+		mScene.setBackground(background);
+
+		floor = new Sprite(CAMERA_WIDTH / 2f, mGroundTextureRegion.getHeight() / 2f, mGroundTextureRegion,
+				getVertexBufferObjectManager());
+		floor.setZIndex(10);
+
+		MoveXModifier floorModifier = new MoveXModifier(3.0f, CAMERA_WIDTH, 6f);
+		floor.registerEntityModifier(new LoopEntityModifier(floorModifier));
+
+		mScene.attachChild(floor);
+
+		mPhysicsWorld = new PhysicsWorld(new Vector2(0, Constant.GRAVITY), false);
+
+		bird = new Bird(CAMERA_WIDTH / 4, CAMERA_HEIGHT / 2, mBirdTextureRegion, getVertexBufferObjectManager(), this,
+				mPhysicsWorld, mScene, mHandler);
+		mScene.attachChild(bird);
+
+		ready = new Sprite(CAMERA_WIDTH / 4 + mReadyTextureRegion.getWidth() / 2, CAMERA_HEIGHT / 2,
+				mReadyTextureRegion, getVertexBufferObjectManager());
+		mScene.attachChild(ready);
+
+		mScene.setOnSceneTouchListener(new IOnSceneTouchListener() {
+
+			@Override
+			public boolean onSceneTouchEvent(Scene arg0, TouchEvent arg1) {
+				System.out.println("isBegin: " + isBegin);
+				System.out.println("isDead: " + isDead);
+				if (arg1.getAction() == TouchEvent.ACTION_DOWN) {
+					if (isDead) {
+						restart();
+					} else if (!isBegin) {
+						begin();
+					}
+					bird.flyUp();
+				}
+				return true;
+			}
+		});
+
+		barManager = new BarManager(mScene, CAMERA_WIDTH, CAMERA_HEIGHT, mUpperBarTextureRegion,
+				mLowerBarTextureRegion, floor, getVertexBufferObjectManager(), mHandler);
+		mScore = new Score(CAMERA_WIDTH / 2, CAMERA_HEIGHT - Constant.PADDING, mNumberTextureRegion,
+				getVertexBufferObjectManager(), mScene);
+
+		mScene.registerUpdateHandler(mPhysicsWorld); 
+		mScene.registerUpdateHandler(updateHandler);
+		return mScene;
+	}
+
+	void restart() {
+		isDead = false;
+		isBegin = false;
+		bird.restart();
+		barManager.restart();
+		ready.setAlpha(1.0f);
+	}
+
+	void begin() {
+		isBegin = true;
+		ready.registerEntityModifier(new AlphaModifier(1.0f, 1.0f, 0.0f));
+		bird.begin();
+		mHandler.postDelayed(addBar, 2000);
+	}
+
+	public static class Constant {
+		public static float SPEED;
+		public static float PADDING;
+		public static float INTERVAL;
+		public static float GRAVITY;
+
+		public static void init() {
+			SPEED = 8f;
+			PADDING = 60f;
+			INTERVAL = 100f;
+			GRAVITY = -SensorManager.GRAVITY_EARTH * 2f;
+		}
+	}
+
+}
diff --git a/src/limk/flappybird/Score.java b/src/limk/flappybird/Score.java
new file mode 100644
index 0000000..0e5a47f
--- /dev/null
+++ b/src/limk/flappybird/Score.java
@@ -0,0 +1,81 @@
+package limk.flappybird;
+
+import org.andengine.entity.scene.Scene;
+import org.andengine.entity.sprite.AnimatedSprite;
+import org.andengine.opengl.texture.region.TiledTextureRegion;
+import org.andengine.opengl.vbo.VertexBufferObjectManager;
+
+public class Score {
+
+	private int score;
+	private VertexBufferObjectManager mVertexBufferObjectManager;
+	private TiledTextureRegion mNumberTiledTextureRegion;
+	private Scene mScene;
+	private float x, y;
+	private AnimatedSprite hundredNum, tenNum, bitNum;
+
+	public Score(float pX, float pY, TiledTextureRegion pTiledTextureRegion,
+			VertexBufferObjectManager pVertexBufferObjectManager, Scene pScene) {
+		this.mVertexBufferObjectManager = pVertexBufferObjectManager;
+		this.mNumberTiledTextureRegion = pTiledTextureRegion;
+		this.mScene = pScene;
+		this.score = 0;
+		this.x = pX;
+		this.y = pY;
+		hundredNum = new AnimatedSprite(x - mNumberTiledTextureRegion.getWidth(), y, mNumberTiledTextureRegion,
+				mVertexBufferObjectManager);
+		tenNum = new AnimatedSprite(x, y, mNumberTiledTextureRegion, mVertexBufferObjectManager);
+		bitNum = new AnimatedSprite(x + mNumberTiledTextureRegion.getWidth(), y, mNumberTiledTextureRegion,
+				mVertexBufferObjectManager);
+		hundredNum.stopAnimation(10);
+		tenNum.stopAnimation(10);
+		bitNum.stopAnimation(10);
+
+		hundredNum.setZIndex(15);
+		tenNum.setZIndex(15);
+		bitNum.setZIndex(15);
+		mScene.attachChild(hundredNum);
+		mScene.attachChild(tenNum);
+		mScene.attachChild(bitNum);
+
+		changeScore();
+	}
+
+	public int getScore() {
+		return score;
+	}
+
+	public void addScore() {
+		score++;
+		changeScore();
+	}
+
+	public void resetScore() {
+		score = 0;
+	}
+
+	public void changeScore() {
+		if (score < 10) {
+			hundredNum.stopAnimation(10);
+			tenNum.stopAnimation(score);
+			bitNum.stopAnimation(10);
+		} else if (score < 100) {
+			int ten = score / 10;
+			int bit = score % 10;
+			hundredNum.stopAnimation(10);
+			tenNum.stopAnimation(ten);
+			bitNum.stopAnimation(bit);
+		} else if (score < 1000) {
+			int hundred = score / 100;
+			int ten = score % 100 / 10;
+			int bit = score % 100 % 10;
+			hundredNum.stopAnimation(hundred);
+			tenNum.stopAnimation(ten);
+			bitNum.stopAnimation(bit);
+		} else {
+			hundredNum.stopAnimation(9);
+			tenNum.stopAnimation(9);
+			bitNum.stopAnimation(9);
+		}
+	}
+}
-- 
2.8.4 (Apple Git-73)

